import numpy as np

#함수로 만듬
def OpenTheCup(strategy):
    
    token=['O','X','O']
    randomCup = np.random.choice(token, 3, p=[1/3,1/3,1/3],replace=False)
    
    if strategy == 0:
        
        if randomCup[0] == 'X':
            return 1
        else:
            return 0
    
    if strategy == 1:
        
        if randomCup[1] == 'O':
            if randomCup[2] == 'X':
                return 1
            else:
                return 0
            
        if randomCup[2] =='O':
            if randomCup[1] == 'X':
                return 1
            else:
                return 0


#메인시작

CupStrategy = [0,1]
#CupStrategy[0]:3개의 컵 중 최초에 선택한 것을 계속 유지한다.
#CupStrategy[1]:최초에 선택받지 못한 2개의 컵중 비어있는 컵을 확인 한 후
#               다른 나머지 하나의 컵으로 선택을 바꾼다.

#num_stgy=2
num_stgy = len(CupStrategy)

#보상의 총합, 최초에는 [0 0]
Reward = np.zeros([num_stgy])

#전략선택확률분포(Weight), 최초에는 [0.5 0.5]
#softmax함수로 불린다 
#= [exp(a_1)/(exp(a_1)+exp(a_2)+...+exp(a_n)), exp(a_2)/(exp(a_1)+exp(a_2)+...+exp(a_n)), ...]
#식에서 확인할 수 있듯이 각각은 양의 값이고 합은 1 이기 때문에 확률분포를 만들기 적합
Selection = np.exp(Reward)/sum(np.exp(Reward))

Nums = 10000
eplison = 0.001

for i in range(Nums):
    #업데이트된 확률분포(Weight)에 따라 전략선택
    #누적보상이 큰 전략이 높은 확률로 선택된다.
    FixSt = np.random.choice(CupStrategy, p=Selection)
    
    #보상의 크기를 조절
    Reward[FixSt] += eplison*OpenTheCup(CupStrategy[FixSt])
    
    #보상에 따라서 확률분포(Weight)를 업데이트
    Selection = np.exp(Reward)/sum(np.exp(Reward))
    
    if i % 1000 == 0 : print(Selection)
   
